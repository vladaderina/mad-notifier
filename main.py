import asyncio
import argparse
import json
import logging
import os
from logging.handlers import RotatingFileHandler
from datetime import datetime, timezone
from typing import Dict, Optional, List

from aiohttp import web
import aiohttp
from jinja2 import Environment

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_PORT = 8000  # –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_LOG_PATH = 'anomaly_notifier.log'
MAX_LOG_SIZE = 5 * 1024 * 1024  # 5 MB
LOG_BACKUP_COUNT = 3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class AnomalyNotifier:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö —Å HTTP API."""
    
    def __init__(self):
        self.jinja_env = Environment()
        self.jinja_env.filters['datetimeformat'] = self._format_datetime
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ env
        self.port = int(os.getenv('PORT', DEFAULT_PORT))
        self.debug = os.getenv('DEBUG', 'false').lower() == 'true'
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        self._validate_config()
        self._setup_logging()
        self._init_templates()
        
        self.app = web.Application()
        self.app.add_routes([
            web.post('/api/v1/anomalies', self.handle_anomaly),
            web.get('/health', self.handle_healthcheck)
        ])
        
        self.http_session = None
        self.runner = None
        self.site = None

    def _init_templates(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.templates = {
            'start': self.jinja_env.from_string("""
                üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è* üö®

                *–¢–∏–ø:* `{{ anomaly_type }}`
                *–ú–µ—Ç—Ä–∏–∫–∞:* `{{ metric_name }}`
                *–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:* `{{ start_time|datetimeformat }}`
                *–û–ø–∏—Å–∞–Ω–∏–µ:* {{ description }}

                {% if average_anom_score %}*–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏:* `{{ "%.2f"|format(average_anom_score) }}`{% endif %}
                """.strip()),
            'end': self.jinja_env.from_string("""
                ‚úÖ *–ê–Ω–æ–º–∞–ª–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞* ‚úÖ

                *–¢–∏–ø:* `{{ anomaly_type }}`
                *–ú–µ—Ç—Ä–∏–∫–∞:* `{{ metric_name }}`
                *–ù–∞—á–∞–ª–æ:* `{{ start_time|datetimeformat }}`
                *–ö–æ–Ω–µ—Ü:* `{{ end_time|datetimeformat }}`
                *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {{ duration }}

                {% if average_anom_score %}*–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏:* `{{ "%.2f"|format(average_anom_score) }}`{% endif %}
                """.strip())
        }

    async def handle_healthcheck(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ healthcheck –∑–∞–ø—Ä–æ—Å–æ–≤."""
        return web.json_response({"status": "ok"})

    async def handle_anomaly(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö."""
        try:
            data = await request.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏: {data}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['action', 'id', 'anomaly_type', 'metric_name']
            for field in required_fields:
                if field not in data:
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            
            await self._process_anomaly(data)
            return web.json_response({"status": "success"})
        except json.JSONDecodeError:
            logger.error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.json_response({"error": "Invalid JSON"}, status=400)
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            return web.json_response({"error": str(e)}, status=400)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return web.json_response({"error": "Internal server error"}, status=500)

    def _load_config_from_env(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        config = {
            'system': {
                'debug': os.getenv('DEBUG', 'false').lower() == 'true',
                'port': int(os.getenv('PORT', DEFAULT_PORT)),
                'log_path': os.getenv('LOG_PATH', DEFAULT_LOG_PATH)
            },
            'mad-notifier': {
                'bot_token': os.getenv('TELEGRAM_BOT_TOKEN'),
                'chat_id': os.getenv('TELEGRAM_CHAT_ID')
            }
        }
        
        self._validate_config(config)
        return config

    def _validate_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN must be set")
        if not self.chat_id:
            raise ValueError("TELEGRAM_CHAT_ID must be set")

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º DEBUG —Ñ–ª–∞–≥–∞"""
        log_level = logging.DEBUG if self.debug else logging.INFO
        logger.setLevel(log_level)
        
        formatter = logging.Formatter(
            '[%(levelname)s] %(asctime)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å)
        log_path = os.getenv('LOG_PATH')
        if log_path:
            file_handler = RotatingFileHandler(
                log_path,
                maxBytes=MAX_LOG_SIZE,
                backupCount=LOG_BACKUP_COUNT
            )
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)

    def _format_datetime(self, value) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ datetime –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤."""
        if not value:
            return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if isinstance(value, str):
            try:
                if value.endswith('Z'):
                    value = value[:-1] + '+00:00'
                value = datetime.fromisoformat(value)
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ datetime: {str(e)}")
                return "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"
        
        if not isinstance(value, datetime):
            return "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–∏"
        
        try:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
            if value.tzinfo is None:
                value = value.replace(tzinfo=timezone.utc)
            
            dt_str = value.astimezone(timezone.utc).strftime('%Y\-%m\-%d %H:%M:%S UTC')
            return dt_str.replace(".", "\.").replace("-", "\-").replace("(", "\(").replace(")", "\)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
            return "–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"

    def _prepare_telegram_text(self, text: str) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
        if not text or len(text.strip()) == 0:
            logger.error("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return ""

        markdown_chars = '_*[]()~`>#+-=|{}.!'
        escaped_text = ''.join(f'\\{char}' if char in markdown_chars else char for char in text)
        
        if len(escaped_text) > 4096:
            logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(escaped_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return escaped_text[:4000] + "... [—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
        
        return escaped_text

    async def _send_telegram_message(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram."""
        try:
            bot_token = self.config['mad-notifier'].get('bot_token')
            chat_id = self.config['mad-notifier'].get('chat_id')
            
            if not bot_token or not chat_id:
                logger.error("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return False

            safe_text = self._prepare_telegram_text(text)
            if not safe_text:
                return False

            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            params = {
                'chat_id': chat_id,
                'text': safe_text,
                'parse_mode': 'MarkdownV2',
                'disable_web_page_preview': True
            }

            async with self.http_session.post(url, json=params) as resp:
                response = await resp.json()
                
                if resp.status == 200 and response.get('ok'):
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    return True
                
                error_msg = response.get('description', 'Unknown error')
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {error_msg}")
                return False

        except aiohttp.ClientError as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    async def _process_anomaly(self, anomaly_data: Dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–æ–º–∞–ª–∏–∏."""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ datetime –æ–±—ä–µ–∫—Ç—ã
            if isinstance(anomaly_data.get('start_time'), str):
                anomaly_data['start_time'] = datetime.fromisoformat(
                    anomaly_data['start_time'].replace('Z', '+00:00')
                )
            
            if isinstance(anomaly_data.get('end_time'), str):
                anomaly_data['end_time'] = datetime.fromisoformat(
                    anomaly_data['end_time'].replace('Z', '+00:00')
                )
            
            template_type = 'start' if anomaly_data['action'] == 'start' else 'end'
            message = self.templates[template_type].render(**anomaly_data)
            
            if await self._send_telegram_message(message):
                action = "–Ω–∞—á–∞–ª–∞" if template_type == 'start' else "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {action} –∞–Ω–æ–º–∞–ª–∏–∏ {anomaly_data['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–æ–º–∞–ª–∏–∏: {str(e)}")

    async def start_server(self):
            """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ—Ä—Ç–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
            self.http_session = aiohttp.ClientSession()
            self.runner = web.AppRunner(self.app)
            await self.runner.setup()
            
            self.site = web.TCPSite(self.runner, '0.0.0.0', self.port)
            await self.site.start()
            
            logger.info(f"–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port} (DEBUG: {self.debug})")
            
    async def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞."""
        if self.http_session:
            await self.http_session.close()
        if self.site:
            await self.site.stop()
        if self.runner:
            await self.runner.cleanup()
        logger.info("–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
    parser = argparse.ArgumentParser(description='Anomaly Notifier Service')
    parser.add_argument('--port', type=int, help='Port to listen on')
    args = parser.parse_args()

    notifier = AnomalyNotifier()
    
    try:
        await notifier.start_server(port=args.port)
        while True:
            await asyncio.sleep(3600)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
    finally:
        await notifier.stop_server()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")